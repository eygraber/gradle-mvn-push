/*
ONLY TESTED ON GRADLE 2.1
Requires these properties in gradle.properties:
*SAMPLE*
VERSION_NAME=0.1
GROUP=com.staticbloc
POM_NAME=Jobs
POM_ARTIFACT_ID=jobs
POM_PACKAGING=aar
POM_DESCRIPTION=A task queue library for Android.
POM_URL=https://github.com/eygraber/jobs
POM_SCM_URL=https://github.com/eygraber/jobs
POM_SCM_CONNECTION=scm:git@github.com:eygraber/jobs.git
POM_SCM_DEV_CONNECTION=scm:git@github.com:eygraber/jobs.git
POM_LICENCE_NAME=The Apache Software License, Version 2.0
POM_LICENCE_URL=http://www.apache.org/licenses/LICENSE-2.0.txt
POM_LICENCE_DIST=repo
POM_DEVELOPER_ID=eygrbaer
POM_DEVELOPER_NAME=Eliezer Graber
To use SNAPSHOT dependencies include:
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/'}
in your build.gradle's repositories
This script is for those who don't want to store passwords in a property file / envvar.
For those that do, check out:
    https://raw.githubusercontent.com/koush/mvn-repo/master/maven.gradle
    https://raw.githubusercontent.com/amlcurran/ShowcaseView/master/library/gradle-mvn-push.gradle
    
This script should be included at the bottom of build.gradle like so:
    apply from: 'https://raw.githubusercontent.com/eygraber/gradle-mvn-push/master/gradle-mvn-push.gradle'
    
*/

apply plugin: 'maven'
apply plugin: 'signing'

def isReleaseBuild() {
    return VERSION_NAME.contains('SNAPSHOT') == false
}

def getReleaseRepositoryUrl() {
    return 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
}

def getSnapshotRepositoryUrl() {
    return 'https://oss.sonatype.org/content/repositories/snapshots/'
}

def listGpgKeys() {
    exec {
        executable 'gpg'
        args '--list-keys', ''
    }
}

afterEvaluate { project ->
    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask(":${project.name}:uploadArchives") }
        sign configurations.archives
    }

    gradle.taskGraph.whenReady { taskGraph ->
        if (taskGraph.hasTask(":${project.name}:uploadArchives")) {
            Console console = System.console()
            if(console != null) {
                listGpgKeys()
                console.printf '\n\nWe have to sign some things in this build.' +
                        '\n\nPlease enter your signing details.\n\n'

                def id = console.readLine('PGP Key Id: ')
                def file = console.readLine('PGP Secret Key Ring File (<absolute_path>/secring.gpg): ')
                def password = console.readPassword('PGP Private Key Password: ')

                allprojects { ext.'signing.keyId' = id }
                allprojects { ext.'signing.secretKeyRingFile' = file }
                allprojects { ext.'signing.password' = password }

                console.printf '\nThanks.\n\n'
            }
        }

        uploadArchives {
            repositories {
                mavenDeployer {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                    pom.groupId = GROUP
                    pom.artifactId = POM_ARTIFACT_ID
                    pom.version = VERSION_NAME

                    repositories {
                        Console console = System.console()
                        if(console != null && taskGraph.hasTask(":${project.name}:uploadArchives")) {
                            ext {
                                nexusUsername = new String(console.readLine('\nEnter your Sonatype/Nexus username:'))
                                nexusPassword = new String(console.readPassword('\nEnter your Sonatype/Nexus password:'))
                            }
                        }
                        else {
                            ext {
                                nexusUsername = ''
                                nexusPassword = ''
                            }
                        }

                        repository(url: getReleaseRepositoryUrl()) {
                            authentication(userName: nexusUsername, password: nexusPassword)
                        }
                        snapshotRepository(url: getSnapshotRepositoryUrl()) {
                            authentication(userName: nexusUsername, password: nexusPassword)
                        }
                    }

                    pom.project {
                        name POM_NAME
                        packaging POM_PACKAGING
                        description POM_DESCRIPTION
                        url POM_URL

                        scm {
                            url POM_SCM_URL
                            connection POM_SCM_CONNECTION
                            developerConnection POM_SCM_DEV_CONNECTION
                        }

                        licenses {
                            license {
                                name POM_LICENCE_NAME
                                url POM_LICENCE_URL
                                distribution POM_LICENCE_DIST
                            }
                        }

                        developers {
                            developer {
                                id POM_DEVELOPER_ID
                                name POM_DEVELOPER_NAME
                            }
                        }
                    }
                }
            }
        }
    }
    
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives packageReleaseJar
        archives sourcesJar
        archives javadocJar
    }
}
